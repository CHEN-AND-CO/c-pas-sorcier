# Makefile by KÃ©vin Le Torc'h

EXE_1 = test_simulateur
EXE_2 = test_usb

ifeq ($(OS),Windows_NT)     					# Windows OS
    detected_OS := Windows
else
    detected_OS := $(shell uname) 				# Unix Based OS
endif

ifeq ($(CC),cc)									# If CC set to "cc"				
	CC = gcc									# Forced to "gcc"
endif
ifeq ($(CC),)									# If no c compiler set
	CC = gcc									# Forced to "gcc"
endif

INCLUDES = -I. -Ilib							# include folders
CFLAGS = -g -Wall -Wextra -Os -std=gnu11		# Compiler flags
LDFLAGS = -lm									# Libs for all systems

ifeq ($(detected_OS),Windows)
    LDFLAGS += ./ftd2xx.lib
	EXE_1 += .exe
	EXE_2 += .exe
else
    LDFLAGS += -lftd2xx
endif

SRC = $(wildcard *.c)
NOM = $(basename $(notdir $(SRC)))
OBJ = $(subst obj/$(EXE_2).o,,$(subst obj/$(EXE_1).o,,$(addprefix obj/, $(addsuffix .o, $(NOM)))))

all: $(EXE_1) $(EXE_2)							# Build all executables

rebuild: remake									# Clean and build all executables

remake: clean $(EXE_1) $(EXE_2)					# Same as rebuild

$(EXE_1): $(OBJ) obj/$(EXE_1).o
	$(CC) $(OBJ) obj/$(EXE_1).o $(LDFLAGS) -o $@

$(EXE_2): $(OBJ) obj/$(EXE_2).o
	$(CC) $(OBJ) obj/$(EXE_2).o $(LDFLAGS) -o $@

# Build all the .o files
obj/%.o: %.c
	$(CC) -c $< $(INCLUDES) -o $@ $(CFLAGS)

# Remove all files generated by compilation (executables included)
clean:
	rm $(OBJ) obj/$(EXE_1).o obj/$(EXE_2).o $(EXE_1) $(EXE_2) obj/*.gch -f

# Remove all files generated by compilation (except executables)
clear:
	rm $(OBJ) obj/$(EXE_1).o obj/$(EXE_2).o obj/*.gch -f

run-usb: $(EXE_2)
	./$(EXE_2)

run-simu: $(EXE_1)
	./$(EXE_1)